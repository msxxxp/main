#ifndef LIBSTL_RATIO_
#define LIBSTL_RATIO_

#include <system/configure.hpp>

#include <simstd/type_traits>
//#include <cstdint>

namespace simstd {

	namespace pvt {

		template<intmax_t X>
		struct static_sign: integral_constant<intmax_t, (X < 0) ? -1 : 1>
		{
		};

		template<intmax_t X>
		struct static_abs: integral_constant<intmax_t, X * static_sign<X>::value>
		{
		};

		template<intmax_t X, intmax_t Y>
		struct static_gcd: static_gcd<Y, (X % Y)>
		{
		};

		template<intmax_t X>
		struct static_gcd<X, 0> : integral_constant<intmax_t, static_abs<X>::value>
		{
		};

		template<intmax_t X>
		struct static_gcd<0, X> : integral_constant<intmax_t, static_abs<X>::value>
		{
		};

		template<intmax_t X, intmax_t Y>
		struct safe_multiply
		{
		private:
			static const uintmax_t __c = uintmax_t(1) << (sizeof(intmax_t) * 4);

			static const uintmax_t __a0 = static_abs<X>::value % __c;
			static const uintmax_t __a1 = static_abs<X>::value / __c;
			static const uintmax_t __b0 = static_abs<Y>::value % __c;
			static const uintmax_t __b1 = static_abs<Y>::value / __c;

			static_assert(__a1 == 0 || __b1 == 0, "overflow in multiplication");
			static_assert(__a0 * __b1 + __b0 * __a1 < (__c >> 1), "overflow in multiplication");
			static_assert(__b0 * __a0 <= __INTMAX_MAX__, "overflow in multiplication");
			static_assert((__a0 * __b1 + __b0 * __a1) * __c <= __INTMAX_MAX__ - __b0 * __a0, "overflow in multiplication");

		public:
			static const intmax_t value = X * Y;
		};

		template<uintmax_t HiX, uintmax_t LoX, uintmax_t HiY, uintmax_t LoY>
		struct big_less: integral_constant<bool, (HiX < HiY || (HiX == HiY && LoX < LoY))>
		{
		};

		template<uintmax_t HiX, uintmax_t LoX, uintmax_t HiY, uintmax_t LoY>
		struct big_add
		{
			static constexpr uintmax_t lo = LoX + LoY;
			static constexpr uintmax_t hi = (HiX + HiY + (LoX + LoY < LoX));
		};

		template<uintmax_t HiX, uintmax_t LoX, uintmax_t HiY, uintmax_t LoY>
		struct big_sub
		{
			static_assert(!big_less<HiX, LoX, HiY, LoY>::value, "Internal library error");
			static constexpr uintmax_t lo = LoX - LoY;
			static constexpr uintmax_t hi = (HiX - HiY - (LoX < LoY));
		};

		template<uintmax_t X, uintmax_t Y>
		struct big_mul
		{
		private:
			static constexpr uintmax_t __c = uintmax_t(1) << (sizeof(intmax_t) * 4);
			static constexpr uintmax_t __x0 = X % __c;
			static constexpr uintmax_t __x1 = X / __c;
			static constexpr uintmax_t __y0 = Y % __c;
			static constexpr uintmax_t __y1 = Y / __c;
			static constexpr uintmax_t __x0y0 = __x0 * __y0;
			static constexpr uintmax_t __x0y1 = __x0 * __y1;
			static constexpr uintmax_t __x1y0 = __x1 * __y0;
			static constexpr uintmax_t __x1y1 = __x1 * __y1;
			static constexpr uintmax_t __mix = __x0y1 + __x1y0;
			static constexpr uintmax_t __mix_lo = __mix * __c;
			static constexpr uintmax_t __mix_hi = __mix / __c + ((__mix < __x0y1) ? __c : 0);
			typedef big_add<__mix_hi, __mix_lo, __x1y1, __x0y0> _Res;
		public:
			static constexpr uintmax_t __hi = _Res::__hi;
			static constexpr uintmax_t __lo = _Res::__lo;
		};

		template<uintmax_t N1, uintmax_t N0, uintmax_t D>
		struct big_div_impl
		{
		private:
			static_assert(D >= (uintmax_t(1) << (sizeof(intmax_t) * 8 - 1)), "Internal library error");
			static_assert(N1 < D, "Internal library error");
			static constexpr uintmax_t __c = uintmax_t(1) << (sizeof(intmax_t) * 4);
			static constexpr uintmax_t __d1 = D / __c;
			static constexpr uintmax_t __d0 = D % __c;

			static constexpr uintmax_t __q1x = N1 / __d1;
			static constexpr uintmax_t __r1x = N1 % __d1;
			static constexpr uintmax_t __m = __q1x * __d0;
			static constexpr uintmax_t __r1y = __r1x * __c + N0 / __c;
			static constexpr uintmax_t __r1z = __r1y + D;
			static constexpr uintmax_t __r1 = ((__r1y < __m) ? ((__r1z >= D) && (__r1z < __m)) ? (__r1z + D) : __r1z : __r1y) - __m;
			static constexpr uintmax_t __q1 = __q1x - ((__r1y < __m) ? ((__r1z >= D) && (__r1z < __m)) ? 2 : 1 : 0);
			static constexpr uintmax_t __q0x = __r1 / __d1;
			static constexpr uintmax_t __r0x = __r1 % __d1;
			static constexpr uintmax_t __n = __q0x * __d0;
			static constexpr uintmax_t __r0y = __r0x * __c + N0 % __c;
			static constexpr uintmax_t __r0z = __r0y + D;
			static constexpr uintmax_t __r0 = ((__r0y < __n) ? ((__r0z >= D) && (__r0z < __n)) ? (__r0z + D) : __r0z : __r0y) - __n;
			static constexpr uintmax_t __q0 = __q0x - ((__r0y < __n) ? ((__r0z >= D) && (__r0z < __n)) ? 2 : 1 : 0);

		public:
			static constexpr uintmax_t __quot = __q1 * __c + __q0;
			static constexpr uintmax_t __rem = __r0;

		private:
			typedef big_mul< __quot, D> _Prod;
			typedef big_add <_Prod::__hi, _Prod::__lo, 0, __rem> _Sum;
			static_assert(_Sum::__hi == N1 && _Sum::__lo == N0, "Internal library error");
		};

		template<uintmax_t __n1, uintmax_t __n0, uintmax_t __d>
		struct big_div
		{
		private:
			static_assert(__d != 0, "Internal library error");
			static_assert(sizeof (uintmax_t) == sizeof (unsigned long long),
				"This library calls __builtin_clzll on uintmax_t, which "
				"is unsafe on your platform. Please complain to "
				"http://gcc.gnu.org/bugzilla/");
			static constexpr int __shift = __builtin_clzll(__d);
			static constexpr int __coshift_ = sizeof(uintmax_t) * 8 - __shift;
			static constexpr int __coshift = (__shift != 0) ? __coshift_ : 0;
			static constexpr uintmax_t __c1 = uintmax_t(1) << __shift;
			static constexpr uintmax_t __c2 = uintmax_t(1) << __coshift;
			static constexpr uintmax_t __new_d = __d * __c1;
			static constexpr uintmax_t __new_n0 = __n0 * __c1;
			static constexpr uintmax_t __n1_shifted = (__n1 % __d) * __c1;
			static constexpr uintmax_t __n0_top = (__shift != 0) ? (__n0 / __c2) : 0;
			static constexpr uintmax_t __new_n1 = __n1_shifted + __n0_top;
			typedef big_div_impl< __new_n1, __new_n0, __new_d> _Res;

		public:
			static constexpr uintmax_t __quot_hi = __n1 / __d;
			static constexpr uintmax_t __quot_lo = _Res::__quot;
			static constexpr uintmax_t __rem = _Res::__rem / __c1;

		private:
			typedef big_mul< __quot_lo, __d> _P0;
			typedef big_mul< __quot_hi, __d> _P1;
			typedef big_add <_P0::__hi, _P0::__lo, _P1::__lo, __rem> _Sum;
			static_assert(_P1::__hi == 0, "Internal library error");
			static_assert(_Sum::__hi >= _P0::__hi, "Internal library error");
			static_assert(_Sum::__hi == __n1 && _Sum::__lo == __n0, "Internal library error");
			static_assert(__rem < __d, "Internal library error");
		};
	}


	template<intmax_t _Num, intmax_t _Den = 1>
	struct ratio
	{
		static_assert(_Den != 0, "denominator cannot be zero");
		static_assert(_Num >= -__INTMAX_MAX__ && _Den >= -__INTMAX_MAX__, "out of range");

		static constexpr intmax_t num = _Num * pvt::static_sign<_Den>::value / pvt::static_gcd<_Num, _Den>::value;
		static constexpr intmax_t den = pvt::static_abs<_Den>::value / pvt::static_gcd<_Num, _Den>::value;

		typedef ratio<num, den> type;
	};

	template<intmax_t _Num, intmax_t _Den>
	constexpr intmax_t ratio<_Num, _Den>::num;

	template<intmax_t _Num, intmax_t _Den>
	constexpr intmax_t ratio<_Num, _Den>::den;

	template<typename _R1, typename _R2>
	struct __ratio_multiply
	{
	private:
		static const intmax_t __gcd1 = pvt::static_gcd<_R1::num, _R2::den>::value;
		static const intmax_t __gcd2 = pvt::static_gcd<_R2::num, _R1::den>::value;

	public:
		typedef ratio<pvt::safe_multiply<(_R1::num / __gcd1), (_R2::num / __gcd2)>::value, pvt::safe_multiply<(_R1::den / __gcd2), (_R2::den / __gcd1)>::value> type;

		static constexpr intmax_t num = type::num;
		static constexpr intmax_t den = type::den;
	};

	template<typename _R1, typename _R2>
	constexpr intmax_t __ratio_multiply<_R1, _R2>::num;

	template<typename _R1, typename _R2>
	constexpr intmax_t __ratio_multiply<_R1, _R2>::den;

	/// ratio_multiply
	template<typename _R1, typename _R2>
	using ratio_multiply = typename __ratio_multiply<_R1, _R2>::type;

	template<typename _R1, typename _R2>
	struct __ratio_divide
	{
		static_assert(_R2::num != 0, "division by 0");

		typedef typename __ratio_multiply<_R1, ratio<_R2::den, _R2::num>>::type type;

		static constexpr intmax_t num = type::num;
		static constexpr intmax_t den = type::den;
	};

	template<typename _R1, typename _R2>
	constexpr intmax_t __ratio_divide<_R1, _R2>::num;

	template<typename _R1, typename _R2>
	constexpr intmax_t __ratio_divide<_R1, _R2>::den;

	/// ratio_divide
	template<typename _R1, typename _R2>
	using ratio_divide = typename __ratio_divide<_R1, _R2>::type;

	/// ratio_equal
	template<typename _R1, typename _R2>
	struct ratio_equal: integral_constant<bool, _R1::num == _R2::num && _R1::den == _R2::den>
	{
	};

	/// ratio_not_equal
	template<typename _R1, typename _R2>
	struct ratio_not_equal: integral_constant<bool, !ratio_equal<_R1, _R2>::value>
	{
	};

	// Both numbers are positive.
	template<typename _R1, typename _R2, typename _Left = pvt::big_mul <_R1::num, _R2::den>, typename _Right = pvt::big_mul <_R2::num, _R1::den> >
	struct __ratio_less_impl_1: integral_constant<bool, pvt::big_less<_Left::__hi, _Left::__lo, _Right::__hi, _Right::__lo>::value>
	{
	};

	template<typename _R1, typename _R2, bool = (_R1::num == 0 || _R2::num == 0 || (pvt::static_sign<_R1::num>::value != pvt::static_sign<_R2::num>::value)), bool = (pvt::static_sign<_R1::num>::value == -1 && pvt::static_sign<_R2::num>::value == -1)>
	struct __ratio_less_impl: __ratio_less_impl_1<_R1, _R2>::type
	{
	};

	template<typename _R1, typename _R2>
	struct __ratio_less_impl<_R1, _R2, true, false> : integral_constant<bool, _R1::num < _R2::num>
	{
	};

	template<typename _R1, typename _R2>
	struct __ratio_less_impl<_R1, _R2, false, true> : __ratio_less_impl_1<ratio<-_R2::num, _R2::den>, ratio<-_R1::num, _R1::den> >::type
	{
	};

	/// ratio_less
	template<typename _R1, typename _R2>
	struct ratio_less: __ratio_less_impl<_R1, _R2>::type
	{
	};

	/// ratio_less_equal
	template<typename _R1, typename _R2>
	struct ratio_less_equal: integral_constant<bool, !ratio_less<_R2, _R1>::value>
	{
	};

	/// ratio_greater
	template<typename _R1, typename _R2>
	struct ratio_greater: integral_constant<bool, ratio_less<_R2, _R1>::value>
	{
	};

	/// ratio_greater_equal
	template<typename _R1, typename _R2>
	struct ratio_greater_equal: integral_constant<bool, !ratio_less<_R1, _R2>::value>
	{
	};

	template<typename _R1, typename _R2, bool = (_R1::num >= 0), bool = (_R2::num >= 0), bool = ratio_less<ratio<pvt::static_abs<_R1::num>::value, _R1::den>,
	    ratio<pvt::static_abs<_R2::num>::value, _R2::den> >::value>
	struct __ratio_add_impl
	{
	private:
		typedef typename __ratio_add_impl<ratio<-_R1::num, _R1::den>, ratio<-_R2::num, _R2::den> >::type __t;
	public:
		typedef ratio<-__t::num, __t::den> type;
	};

	// True addition of nonnegative numbers.
	template<typename _R1, typename _R2, bool __b>
	struct __ratio_add_impl<_R1, _R2, true, true, __b>
	{
	private:
		static constexpr uintmax_t __g = pvt::static_gcd<_R1::den, _R2::den>::value;
		static constexpr uintmax_t __d2 = _R2::den / __g;
		typedef pvt::big_mul <_R1::den, __d2> __d;
		typedef pvt::big_mul <_R1::num, _R2::den / __g> __x;
		typedef pvt::big_mul <_R2::num, _R1::den / __g> __y;
		typedef pvt::big_add< __x:: __hi, __x:: __lo, __y:: __hi, __y:: __lo> __n;
		static_assert(__n::__hi >= __x::__hi, "Internal library error");
		typedef pvt::big_div< __n:: __hi, __n:: __lo, __g> __ng; static constexpr uintmax_t __g2 = pvt::static_gcd<__ng::__rem, __g>::value;
		typedef pvt::big_div< __n:: __hi, __n:: __lo, __g2> __n_final;
		static_assert(__n_final::__rem == 0, "Internal library error");
		static_assert(__n_final::__quot_hi == 0 &&
			__n_final::__quot_lo <= __INTMAX_MAX__, "overflow in addition");
		typedef pvt::big_mul <_R1::den / __g2, __d2> __d_final;
		static_assert(__d_final::__hi == 0 &&
			__d_final::__lo <= __INTMAX_MAX__, "overflow in addition");
	public:
		typedef ratio<__n_final::__quot_lo, __d_final::__lo> type;
	};

	template<typename _R1, typename _R2>
	struct __ratio_add_impl<_R1, _R2, false, true, true> : __ratio_add_impl<_R2, _R1>
	{
	};

	// True subtraction of nonnegative numbers yielding a nonnegative result.
	template<typename _R1, typename _R2>
	struct __ratio_add_impl<_R1, _R2, true, false, false>
	{
	private:
		static constexpr uintmax_t __g = pvt::static_gcd<_R1::den, _R2::den>::value;
		static constexpr uintmax_t __d2 = _R2::den / __g;
		typedef pvt::big_mul <_R1::den, __d2> __d;
		typedef pvt::big_mul <_R1::num, _R2::den / __g> __x;
		typedef pvt::big_mul <-_R2::num, _R1::den / __g> __y;
		typedef pvt::big_sub< __x:: __hi, __x:: __lo, __y:: __hi, __y:: __lo> __n;
		typedef pvt::big_div< __n:: __hi, __n:: __lo, __g> __ng;
		static constexpr uintmax_t __g2 = pvt::static_gcd<__ng::__rem, __g>::value;
		typedef pvt::big_div< __n:: __hi, __n:: __lo, __g2> __n_final;
		static_assert(__n_final::__rem == 0, "Internal library error");
		static_assert(__n_final::__quot_hi == 0 &&
			__n_final::__quot_lo <= __INTMAX_MAX__, "overflow in addition");
		typedef pvt::big_mul <_R1::den / __g2, __d2> __d_final;
		static_assert(__d_final::__hi == 0 &&
			__d_final::__lo <= __INTMAX_MAX__, "overflow in addition");
	public:
		typedef ratio<__n_final::__quot_lo, __d_final::__lo> type;
	};

	template<typename _R1, typename _R2>
	struct __ratio_add
	{
		typedef typename __ratio_add_impl<_R1, _R2>::type type;
		static constexpr intmax_t num = type::num;
		static constexpr intmax_t den = type::den;
	};

	template<typename _R1, typename _R2>
	constexpr intmax_t __ratio_add<_R1, _R2>::num;

	template<typename _R1, typename _R2>
	constexpr intmax_t __ratio_add<_R1, _R2>::den;

	/// ratio_add
	template<typename _R1, typename _R2>
	using ratio_add = typename __ratio_add<_R1, _R2>::type;

	template<typename _R1, typename _R2>
	struct __ratio_subtract
	{
		typedef typename __ratio_add<_R1, ratio<-_R2::num, _R2::den>>::type type;

		static constexpr intmax_t num = type::num;
		static constexpr intmax_t den = type::den;
	};

	template<typename _R1, typename _R2>
	constexpr intmax_t __ratio_subtract<_R1, _R2>::num;

	template<typename _R1, typename _R2>
	constexpr intmax_t __ratio_subtract<_R1, _R2>::den;

	/// ratio_subtract
	template<typename _R1, typename _R2>
	using ratio_subtract = typename __ratio_subtract<_R1, _R2>::type;

	typedef ratio<1, 1000000000000000000> atto;
	typedef ratio<1, 1000000000000000> femto;
	typedef ratio<1, 1000000000000> pico;
	typedef ratio<1, 1000000000> nano;
	typedef ratio<1, 1000000> micro;
	typedef ratio<1, 1000> milli;
	typedef ratio<1, 100> centi;
	typedef ratio<1, 10> deci;
	typedef ratio<10, 1> deca;
	typedef ratio<100, 1> hecto;
	typedef ratio<1000, 1> kilo;
	typedef ratio<1000000, 1> mega;
	typedef ratio<1000000000, 1> giga;
	typedef ratio<1000000000000, 1> tera;
	typedef ratio<1000000000000000, 1> peta;
	typedef ratio<1000000000000000000, 1> exa;

}

#endif

