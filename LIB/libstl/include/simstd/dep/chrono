#ifndef LIBSTL_CHRONO_
#define LIBSTL_CHRONO_

#include <system/configure.hpp>
#include <simstd/ratio>
#include <simstd/type_traits>
#include <simstd/limits>
#include <simstd/utility>

namespace simstd {

	namespace chrono {
		template<typename Rep, typename Period = ratio<1>>
		struct duration;

		template<typename Clock, typename Dur = typename Clock::duration>
		struct time_point;
	}

	template<typename _CT, typename Period1, typename Period2>
	struct __duration_common_type_wrapper
	{
	private:
		typedef pvt::static_gcd<Period1::num, Period2::num> __gcd_num;
		typedef pvt::static_gcd<Period1::den, Period2::den> __gcd_den;
		typedef typename _CT::type __cr;
		typedef ratio<__gcd_num::value, (Period1::den / __gcd_den::value) * Period2::den> __r;
	public:
		typedef __success_type <chrono::duration<__cr, __r>> type;
	};

	template<typename Period1, typename Period2>
	struct __duration_common_type_wrapper<__failure_type, Period1, Period2>
	{
		typedef __failure_type type;
	};

	template<typename Rep1, typename Period1, typename Rep2, typename Period2>
	struct common_type<chrono::duration<Rep1, Period1>, chrono::duration<Rep2, Period2>> : public __duration_common_type_wrapper<typename __member_type_wrapper<common_type<Rep1, Rep2>>::type, Period1,
	    Period2>::type
	{
	};

	template<typename _CT, typename Clock>
	struct __timepoint_common_type_wrapper
	{
		typedef __success_type <chrono::time_point<Clock, typename _CT::type>> type;
	};

	template<typename Clock>
	struct __timepoint_common_type_wrapper<__failure_type, Clock>
	{
		typedef __failure_type type;
	};

	template<typename Clock, typename Duration1, typename Duration2>
	struct common_type<chrono::time_point<Clock, Duration1>, chrono::time_point<Clock, Duration2>> : public __timepoint_common_type_wrapper<
	    typename __member_type_wrapper<common_type<Duration1, Duration2>>::type, Clock>::type
	{
	};

	namespace chrono {

		template<typename _ToDur, typename _CF, typename _CR, bool _NumIsOne = false, bool _DenIsOne = false>
		struct __duration_cast_impl
		{
			template<typename Rep, typename Period>
			static constexpr _ToDur __cast(const duration<Rep, Period>& d)
			{
				typedef typename _ToDur::rep __to_rep;
				return _ToDur(static_cast<__to_rep >(static_cast<_CR>(d.count()) * static_cast<_CR>(_CF::num) / static_cast<_CR>(_CF::den)));
			}
		};

		template<typename _ToDur, typename _CF, typename _CR>
		struct __duration_cast_impl<_ToDur, _CF, _CR, true, true>
		{
			template<typename Rep, typename Period>
			static constexpr _ToDur __cast(const duration<Rep, Period>& __d)
			{
				typedef typename _ToDur::rep __to_rep;
				return _ToDur(static_cast<__to_rep >(__d.count()));
			}
		};

		template<typename _ToDur, typename _CF, typename _CR>
		struct __duration_cast_impl<_ToDur, _CF, _CR, true, false>
		{
			template<typename Rep, typename Period>
			static constexpr _ToDur __cast(const duration<Rep, Period>& __d)
			{
				typedef typename _ToDur::rep __to_rep;
				return _ToDur(static_cast<__to_rep >(static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
			}
		};

		template<typename _ToDur, typename _CF, typename _CR>
		struct __duration_cast_impl<_ToDur, _CF, _CR, false, true>
		{
			template<typename Rep, typename Period>
			static constexpr _ToDur __cast(const duration<Rep, Period>& __d)
			{
				typedef typename _ToDur::rep __to_rep;
				return _ToDur(static_cast<__to_rep >(static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
			}
		};

		template<typename _Tp>
		struct __is_duration: false_type
		{
		};

		template<typename Rep, typename Period>
		struct __is_duration<duration<Rep, Period>> : true_type
		{
		};

		template<typename _ToDur, typename Rep, typename Period>
		constexpr typename enable_if<__is_duration<_ToDur>::value, _ToDur>::type duration_cast(const duration<Rep, Period>& __d)
		{
			typedef typename _ToDur::period __to_period;
			typedef typename _ToDur::rep __to_rep;
			typedef ratio_divide<Period, __to_period> __cf;
			typedef typename common_type<__to_rep, Rep, intmax_t>::type __cr;
			typedef __duration_cast_impl<_ToDur, __cf, __cr, __cf::num == 1, __cf::den == 1> __dc;
			return __dc::__cast(__d);
		}

		template<typename Rep>
		struct treat_as_floating_point: is_floating_point<Rep>
		{
		};

		template<typename Rep>
		struct duration_values
		{
			static constexpr Rep zero()
			{
				return Rep(0);
			}

			static constexpr Rep max()
			{
				return numeric_limits<Rep>::max();
			}

			static constexpr Rep min()
			{
				return numeric_limits<Rep>::lowest();
			}
		};

		template<typename Type>
		struct __is_ratio: false_type
		{
		};

		template<intmax_t Num, intmax_t Den>
		struct __is_ratio<ratio<Num, Den>> : true_type
		{
		};

		template<typename Rep, typename Period>
		struct duration
		{
			typedef Rep rep;
			typedef Period period;

			static_assert(!__is_duration<Rep>::value, "rep cannot be a duration");
			static_assert(__is_ratio<Period>::value, "period must be a specialization of ratio");
			static_assert(Period::num > 0, "period must be positive");

			constexpr duration() = default;

			duration(const duration&) = default;

			template<typename Rep2, typename = typename enable_if<is_convertible<Rep2, rep>::value && (treat_as_floating_point<rep>::value || !treat_as_floating_point<Rep2>::value)>::type>
			constexpr explicit duration(const Rep2& __rep) :
				__r(static_cast<rep>(__rep))
			{
			}

			template<typename Rep2, typename Period2, typename = typename enable_if<
			    treat_as_floating_point<rep>::value || (ratio_divide<Period2, period>::den == 1 && !treat_as_floating_point<Rep2>::value)>::type>
			constexpr duration(const duration<Rep2, Period2>& __d) :
				__r(duration_cast<duration>(__d).count())
			{
			}

			~duration() = default;

			duration& operator=(const duration&) = default;

			constexpr rep count() const
			{
				return __r;
			}

			constexpr duration operator+() const
			{
				return *this;
			}

			constexpr duration operator-() const
			{
				return duration(-__r);
			}

			duration& operator++()
			{
				++__r;
				return *this;
			}

			duration operator++(int)
			{
				return duration(__r++);
			}

			duration& operator--()
			{
				--__r;
				return *this;
			}

			duration operator--(int)
			{
				return duration(__r--);
			}

			duration& operator+=(const duration& __d)
			{
				__r += __d.count();
				return *this;
			}

			duration& operator-=(const duration& __d)
			{
				__r -= __d.count();
				return *this;
			}

			duration& operator*=(const rep& right)
			{
				__r *= right;
				return *this;
			}

			duration& operator/=(const rep& right)
			{
				__r /= right;
				return *this;
			}

			template<typename Rep2 = rep>
			typename enable_if<!treat_as_floating_point<Rep2>::value, duration&>::type operator%=(const rep& right)
			{
				__r %= right;
				return *this;
			}

			template<typename Rep2 = rep>
			typename enable_if<!treat_as_floating_point<Rep2>::value, duration&>::type operator%=(const duration& __d)
			{
				__r %= __d.count();
				return *this;
			}

			static constexpr duration zero()
			{
				return duration(duration_values<rep>::zero());
			}

			static constexpr duration min()
			{
				return duration(duration_values<rep>::min());
			}

			static constexpr duration max()
			{
				return duration(duration_values<rep>::max());
			}

		private:
			rep __r;
		};

		template<typename Rep1, typename Period1, typename Rep2, typename Period2>
		constexpr typename common_type<duration<Rep1, Period1>, duration<Rep2, Period2>>::type operator+(const duration<Rep1, Period1>& left, const duration<Rep2, Period2>& right)
		{
			typedef duration<Rep1, Period1> Dur1;
			typedef duration<Rep2, Period2> Dur2;
			typedef typename common_type<Dur1, Dur2>::type c_t;
			return c_t(c_t(left).count() + c_t(right).count());
		}

		template<typename Rep1, typename Period1, typename Rep2, typename Period2>
		constexpr typename common_type<duration<Rep1, Period1>, duration<Rep2, Period2>>::type operator-(const duration<Rep1, Period1>& left, const duration<Rep2, Period2>& right)
		{
			typedef duration<Rep1, Period1> Dur1;
			typedef duration<Rep2, Period2> Dur2;
			typedef typename common_type<Dur1, Dur2>::type c_t;
			return c_t(c_t(left).count() - c_t(right).count());
		}

		template<typename Rep1, typename Rep2, bool = is_convertible<Rep2, typename common_type<Rep1, Rep2>::type>::value>
		struct __common_rep_type
		{
		};

		template<typename Rep1, typename Rep2>
		struct __common_rep_type<Rep1, Rep2, true>
		{
			typedef typename common_type<Rep1, Rep2>::type type;
		};

		template<typename Rep1, typename Period, typename Rep2>
		constexpr duration<typename __common_rep_type<Rep1, Rep2>::type, Period> operator*(const duration<Rep1, Period>& __d, const Rep2& __s)
		{
			typedef duration<typename common_type<Rep1, Rep2>::type, Period> c_t;
			return c_t(c_t(__d).count() * __s);
		}

		template<typename Rep1, typename Rep2, typename Period>
		constexpr duration<typename __common_rep_type<Rep2, Rep1>::type, Period> operator*(const Rep1& __s, const duration<Rep2, Period>& __d)
		{
			return __d * __s;
		}

		template<typename Rep1, typename Period, typename Rep2>
		constexpr duration<typename __common_rep_type<Rep1, typename enable_if<!__is_duration<Rep2>::value, Rep2>::type>::type, Period> operator/(const duration<Rep1, Period>& __d, const Rep2& __s)
		{
			typedef duration<typename common_type<Rep1, Rep2>::type, Period> c_t;
			return c_t(c_t(__d).count() / __s);
		}

		template<typename Rep1, typename Period1, typename Rep2, typename Period2>
		constexpr typename common_type<Rep1, Rep2>::type operator/(const duration<Rep1, Period1>& left, const duration<Rep2, Period2>& right)
		{
			typedef duration<Rep1, Period1> Dur1;
			typedef duration<Rep2, Period2> Dur2;
			typedef typename common_type<Dur1, Dur2>::type c_t;
			return c_t(left).count() / c_t(right).count();
		}

		template<typename Rep1, typename Period, typename Rep2>
		constexpr duration<typename __common_rep_type<Rep1, typename enable_if<!__is_duration<Rep2>::value, Rep2>::type>::type, Period> operator%(const duration<Rep1, Period>& __d, const Rep2& __s)
		{
			typedef duration<typename common_type<Rep1, Rep2>::type, Period> c_t;
			return c_t(c_t(__d).count() % __s);
		}

		template<typename Rep1, typename Period1, typename Rep2, typename Period2>
		constexpr typename common_type<duration<Rep1, Period1>, duration<Rep2, Period2>>::type operator%(const duration<Rep1, Period1>& left, const duration<Rep2, Period2>& right)
		{
			typedef duration<Rep1, Period1> Dur1;
			typedef duration<Rep2, Period2> Dur2;
			typedef typename common_type<Dur1, Dur2>::type c_t;
			return c_t(c_t(left).count() % c_t(right).count());
		}

		template<typename Rep1, typename Period1, typename Rep2, typename Period2>
		constexpr bool operator ==(const duration<Rep1, Period1>& left, const duration<Rep2, Period2>& right)
		{
			typedef duration<Rep1, Period1> Dur1;
			typedef duration<Rep2, Period2> Dur2;
			typedef typename common_type<Dur1, Dur2 >::type c_t;
			return c_t(left).count() == c_t(right).count();
		}

		template<typename Rep1, typename Period1, typename Rep2, typename Period2>
		constexpr bool operator <(const duration<Rep1, Period1>& left, const duration<Rep2, Period2>& right)
		{
			typedef duration<Rep1, Period1> Dur1;
			typedef duration<Rep2, Period2> Dur2;
			typedef typename common_type<Dur1, Dur2 >::type c_t;
			return c_t(left).count() < c_t(right).count();
		}

		template<typename Rep1, typename Period1, typename Rep2, typename Period2>
		constexpr bool operator !=(const duration<Rep1, Period1>& left, const duration<Rep2, Period2>& right)
		{
			return rel_ops::operator !=(left, right);
		}

		template<typename Rep1, typename Period1, typename Rep2, typename Period2>
		constexpr bool operator <=(const duration<Rep1, Period1>& left, const duration<Rep2, Period2>& right)
		{
			return rel_ops::operator <=(left, right);
		}

		template<typename Rep1, typename Period1, typename Rep2, typename Period2>
		constexpr bool operator >(const duration<Rep1, Period1>& left, const duration<Rep2, Period2>& right)
		{
			return rel_ops::operator >(left, right);
		}

		template<typename Rep1, typename Period1, typename Rep2, typename Period2>
		constexpr bool operator >=(const duration<Rep1, Period1>& left, const duration<Rep2, Period2>& right)
		{
			return rel_ops::operator >=(left, right);
		}

		typedef duration<int64_t, nano> nanoseconds;
		typedef duration<int64_t, micro> microseconds;
		typedef duration<int64_t, milli> milliseconds;
		typedef duration<int64_t> seconds;
		typedef duration<int, ratio<60>> minutes;
		typedef duration<int, ratio<3600>> hours;

		template<typename Clock, typename Dur>
		struct time_point
		{
			typedef Clock clock;
			typedef Dur duration;
			typedef typename duration::rep rep;
			typedef typename duration::period period;

			constexpr time_point() :
				m_duration(duration::zero())
			{
			}

			constexpr explicit time_point(const duration& dur) :
				m_duration(dur)
			{
			}

			template<typename Dur2>
			constexpr time_point(const time_point<clock, Dur2>& t) :
				m_duration(t.time_since_epoch())
			{
			}

			constexpr duration time_since_epoch() const
			{
				return m_duration;
			}

			time_point& operator +=(const duration& dur)
			{
				m_duration += dur;
				return *this;
			}

			time_point& operator -=(const duration& dur)
			{
				m_duration -= dur;
				return *this;
			}

			static constexpr time_point min()
			{
				return time_point(duration::min());
			}

			static constexpr time_point max()
			{
				return time_point(duration::max());
			}

		private:
			duration m_duration;
		};

		template<typename _ToDur, typename Clock, typename Dur>
		constexpr typename enable_if<__is_duration<_ToDur>::value, time_point<Clock, _ToDur>>::type time_point_cast(const time_point<Clock, Dur>& __t)
		{
			typedef time_point<Clock, _ToDur> t_p;
			return t_p(duration_cast<_ToDur>(__t.time_since_epoch()));
		}

		template<typename Clock, typename Dur1, typename Rep2, typename Period2>
		constexpr time_point<Clock, typename common_type<Dur1, duration<Rep2, Period2>>::type> operator+(const time_point<Clock, Dur1>& left, const duration<Rep2, Period2>& right)
		{
			typedef duration<Rep2, Period2> Dur2;
			typedef typename common_type<Dur1, Dur2 >::type __ct;
			typedef time_point<Clock, __ct> t_p;
			return t_p(left.time_since_epoch() + right);
		}

		template<typename Rep1, typename Period1, typename Clock, typename Dur2>
		constexpr time_point<Clock, typename common_type<duration<Rep1, Period1>, Dur2>::type> operator+(const duration<Rep1, Period1>& left, const time_point<Clock, Dur2>& right)
		{
			typedef duration<Rep1, Period1> Dur1;
			typedef typename common_type<Dur1, Dur2>::type __ct;
			typedef time_point<Clock, __ct> t_p;
			return t_p(right.time_since_epoch() + left);
		}

		template<typename Clock, typename Dur1, typename Rep2, typename Period2>
		constexpr time_point<Clock, typename common_type<Dur1, duration<Rep2, Period2>>::type> operator-(const time_point<Clock, Dur1>& left, const duration<Rep2, Period2>& right)
		{
			typedef duration<Rep2, Period2> Dur2;
			typedef typename common_type<Dur1, Dur2 >::type __ct;
			typedef time_point<Clock, __ct> t_p;
			return t_p(left.time_since_epoch() - right);
		}

		template<typename Clock, typename Dur1, typename Dur2>
		constexpr typename common_type<Dur1, Dur2>::type operator -(const time_point<Clock, Dur1>& left, const time_point<Clock, Dur2>& right)
		{
			return left.time_since_epoch() - right.time_since_epoch();
		}

		template<typename Clock, typename Dur1, typename Dur2>
		constexpr bool operator ==(const time_point<Clock, Dur1>& left, const time_point<Clock, Dur2>& right)
		{
			return left.time_since_epoch() == right.time_since_epoch();
		}

		template<typename Clock, typename Dur1, typename Dur2>
		constexpr bool operator !=(const time_point<Clock, Dur1>& left, const time_point<Clock, Dur2>& right)
		{
			return rel_ops::operator !=(left, right);
		}

		template<typename Clock, typename Dur1, typename Dur2>
		constexpr bool operator <(const time_point<Clock, Dur1>& left, const time_point<Clock, Dur2>& right)
		{
			return left.time_since_epoch() < right.time_since_epoch();
		}

		template<typename Clock, typename Dur1, typename Dur2>
		constexpr bool operator <=(const time_point<Clock, Dur1>& left, const time_point<Clock, Dur2>& right)
		{
			return rel_ops::operator <=(left, right);
		}

		template<typename Clock, typename Dur1, typename Dur2>
		constexpr bool operator >(const time_point<Clock, Dur1>& left, const time_point<Clock, Dur2>& right)
		{
			return rel_ops::operator >(left, right);
		}

		template<typename Clock, typename Dur1, typename Dur2>
		constexpr bool operator >=(const time_point<Clock, Dur1>& left, const time_point<Clock, Dur2>& right)
		{
			return rel_ops::operator >=(left, right);
		}

		struct system_clock
		{
			typedef nanoseconds duration;
			typedef duration::rep rep;
			typedef duration::period period;
			typedef chrono::time_point<system_clock, duration> time_point;

			static_assert(system_clock::duration::min() < system_clock::duration::zero(), "a clock's minimum duration cannot be less than its epoch");

			static constexpr bool is_steady = false;

			static time_point now() noexcept;

			static time_t to_time_t(const time_point& t) noexcept
			{
				return time_t(duration_cast<seconds>(t.time_since_epoch()).count());
			}

			static time_point from_time_t(time_t t) noexcept
			{
				typedef chrono::time_point<system_clock, seconds> From;
				return time_point_cast<system_clock::duration>(From(seconds(t)));
			}
		};

		struct steady_clock
		{
			typedef nanoseconds duration;
			typedef duration::rep rep;
			typedef duration::period period;
			typedef chrono::time_point<steady_clock, duration> time_point;

			static constexpr bool is_steady = true;

			static time_point now() noexcept;
		};

		using high_resolution_clock = system_clock;

		struct perfomance_clock
		{
			typedef nanoseconds duration;
			typedef duration::rep rep;
			typedef duration::period period;
			typedef chrono::time_point<perfomance_clock, duration> time_point;

			static constexpr bool is_steady = true;

			static time_point now() noexcept;
		};

	}
}

#endif
