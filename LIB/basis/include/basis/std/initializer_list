#ifndef BASIS_INITIALIZER_LIST_
#define BASIS_INITIALIZER_LIST_

#include <basis/configure.hpp>

#include <initializer_list>

namespace simstd {

	template<typename Type>
	class initializer_list: public std::initializer_list<Type>
	{
	public:
		typedef typename std::initializer_list<Type>::value_type      value_type;
		typedef typename std::initializer_list<Type>::reference       reference;
		typedef typename std::initializer_list<Type>::const_reference const_reference;
		typedef typename std::initializer_list<Type>::size_type       size_type;
		typedef typename std::initializer_list<Type>::iterator        iterator;
		typedef typename std::initializer_list<Type>::const_iterator  const_iterator;

//		typedef Type        value_type;
//		typedef const Type& reference;
//		typedef const Type& const_reference;
//		typedef size_t      size_type;
//		typedef const Type* iterator;
//		typedef const Type* const_iterator;

//		constexpr initializer_list() noexcept:
//			m_array(0),
//			m_length(0)
//		{
//		}
//
//		constexpr size_type size() const noexcept
//		{
//			return m_length;
//		}
//
//		constexpr const_iterator begin() const noexcept
//		{
//			return m_array;
//		}
//
//		constexpr const_iterator end() const noexcept
//		{
//			return begin() + size();
//		}
//
//	private:
//		iterator m_array;
//		size_type m_length;
//
//		constexpr initializer_list(const_iterator array, size_type length) :
//			m_array(array),
//			m_length(length)
//		{
//		}
	};

	template<class Type>
	constexpr const Type* begin(initializer_list<Type> ilist) noexcept
	{
		return ilist.begin();
	}

	template<class Type>
	constexpr const Type* end(initializer_list<Type> ilist) noexcept
	{
		return ilist.end();
	}

}

#endif
